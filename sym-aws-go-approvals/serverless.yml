service: sym-aws-go-approvals

custom:
  stage: ${{opt:stage, self:provider.stage}}
  symAccountid: ${{opt:symAccountId, '803477428605'}}

provider:
  name: aws
  runtime: go1.x

  endpointType: REGIONAL

# makes serverless variables double braced so as to not conflict with CF
  variableSyntax: '\${{(((?!\${{).)+?)}}' 

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  environment:
    STAGE: ${{self:provider.stage}}

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  approve:
    handler: bin/approve

  expire:
    handler: bin/expire

resources:
  Outputs:
    SymCrossAccountInvocationRole:
      Value:
        Ref: 'SymCrossAccountInvocationRole'
  Resources:
    SymCrossAccountInvocationRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
                - 'arn:aws:iam::${{self:custom.symAccountid}}:root'
            Action:
            - 'sts:AssumeRole'
        Path: '/sym/'
        RoleName:
          Fn::Sub: 'SymExecute-${{self:service}}'
        Description: 'Sym uses this role to invoke lambda functions.'
        Policies:
        - PolicyName: 'SymCanInvokeFunctions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Action:
                - 'lambda:InvokeFunction'
              Resource:
                - Fn::GetAtt: 'ApproveLambdaFunction.Arn'
                - Fn::GetAtt: 'ExpireLambdaFunction.Arn'
